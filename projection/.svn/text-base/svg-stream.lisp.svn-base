;;; -*- Mode: LISP; Syntax: Common-lisp; Package: de.setf.object-graphics.implementation; Base: 10; Lowercase: Yes -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package :de.setf.object-graphics.implementation)

(defpackage :de.setf.object-graphics.implementation.svg
  (:nicknames :svg :|svg|)
  (:use)
  (:export
   :line
   ))

(defpackage :de.setf.object-graphics.implementation.svg-macro
  (:nicknames :svg-macro :%svg)
  (:use)
  (:export
   :line
   ))

(defpackage :de.setf.object-graphics.implementation.svg-function
  (:nicknames :svg-function)
  (:use)
  (:export
   :line
   ))


(in-package :de.setf.object-graphics.implementation.svg)


(defmacro svg:line (&rest args)
  "if the form is an annotated s-exp, then transform the body into a closure
   for a method call, otherwise use the first argument as-is for the method call."
  (cond ((or (keywordp (second args)) (xqdm::is-name (second args)))
	 (destructuring-bind (content-arg &rest keyword-args) args
	     `(svg-function:line ,content-arg ,@keyword-args)))
	(t
	 (destructuring-bind (attributes &rest body) args
	   `(svg-macro:line ,attributes ,@body)))))

(defgeneric svg-function:line (content &rest args
			       &key x1 y1 x2 y2 transform
				    id style class
				    color fill fill-rule stroke stroke-dasharray
				    stroke-dashoffset stroke-linecap stroke-linejoin
				    stroke-miterlimit stroke-width color-interpolation
				    color-rendering
				    display visibility opacity stroke-opacity fill-opacity
				    marker-start marker-mid marker-end
				    onfocusin onfocusout onactivate onclick onmousedown
				    onmouseup onmouseover onmousemove onmouseout onload)
  (:documentation "generate an svg line encoding for the given content and attribute arguments.")
  (:method ((content null) &key x1 y1 x2 y2 transform
				    id style class
				    color fill fill-rule stroke stroke-dasharray
				    stroke-dashoffset stroke-linecap stroke-linejoin
				    stroke-miterlimit stroke-width color-interpolation
				    color-rendering
				    display visibility opacity stroke-opacity fill-opacity
				    marker-start marker-mid marker-end
				    onfocusin onfocusout onactivate onclick onmousedown
				    onmouseup onmouseover onmousemove onmouseout onload)
	   (xml ({svg}line ({}x1  x1) ({}y1  y1) ({}x2  x2) ({}y2  y2)
			   ({}id  id) ({}style  style) ({}class  class)
			   ({}color  color) ({}fill  fill) ({}fill-rule  fill-rule)
			   ({}stroke  stroke) ({}stroke-dasharray  stroke-dasharray)
			   ({}stroke-dashoffset  stroke-dashoffset) ({}stroke-linecap  stroke-linecap)
			   ({}stroke-linejoin  stroke-linejoin)({}stroke-miterlimit  stroke-miterlimit)
			   ({}stroke-width  stroke-width) ({}color-interpolation  color-interpolation)
			   ({}color-rendering  color-rendering)
			   ({}display  display) ({}visibility  visibility)
			   ({}opacity  opacity) ({}stroke-opacity  stroke-opacity) ({}fill-opacity  fill-opacity)
			   ({}marker-start  marker-start) ({}marker-mid  marker-mid) ({}marker-end  marker-end)
			   ({}onfocusin  onfocusin) ({}onfocusout  onfocusout) ({}onactivate  onactivate)
			   ({}onclick  onclick) ({}onmousedown   onmousedown)
			   ({}onmouseup  onmouseup) ({}onmouseover  onmouseover)
			   ({}onmousemove  onmousemove) ({}onmouseout  onmouseout) ({}onload  onload))
		)))

(defmacro svg-macro:line (attributes &rest content)
  
  (flet ((normalize-attribute (attribute-pair)
	   (destructuring-bind (identifier . value) attribute-pair
	     `(,(or (find identifier *line-attributes* :test #'string-equal :key #'local-part)
		    (error "invalid attribute id designator: ~s." identifier))
	       . value))))
    `(xml ({svg}line ,@(mapcar #'normalize-attribute attributes))
	  ,@content)))

(defclass svg-stream ()
  ((context :reader svg-stream-context)))


(defgeneric present (instance context)
  (:method ((instance line) (context svg-generator))
           (line (location instance) (end instance)
                 (presentation-properties instance context))))

(defClass svg-synonym-stream ( synonym-stream)
  ()
  )


#||#
