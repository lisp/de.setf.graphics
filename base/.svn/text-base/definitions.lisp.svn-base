;;; -*- Mode: LISP; Syntax: Common-lisp; Package: (:OG); Base: 10; Lowercase: Yes -*-

;;;; --------------------------------------------------------------------------
;;;; OG-definitions.Lisp ------------------------------------------------------

;;;; basic definitions for simplified object graphics package.
;;;;
;;;; jaa dtmg	140688
;;;; jaa	270688	specified og package for symbol of graphic type in
;;;;                    graphic-reader
;;;; jaa        170788  extended set-display-attributes for fonts and polymode.
;;;; jaa	011189  extended for clx
;;;; jaa	181190  port to clos requires that the parallel hierarchies of
;;;;			structures and objects be combined as the namespaces are
;;;;			not distinct. this is done by using the structures as the
;;;;			objects (which CLOS allows).
;;;;
;;;; --------------------------------------------------------------------------
;;;; graphic object exist in two forms. as object list (eventually CLOS)
;;;; objects, and as structures. the structures contain all parameters
;;;; required to describe the object while the objects contain methods.
;;;;
;;;; the root OG object contains an exist function which will instantiate
;;;; a variable for each slot if such an object is exist'd. in most cases,
;;;; however, only the parameter block is made. the graphics functions
;;;; use the structure type to locate an object which can do the actual
;;;; drawing.

;;;; --------------------------------------------------------------------------

(in-package :og)

(export '(element element-p
          element-location
          element-end
          element-properties
          location end properties

	  view-parameters view-parameters-p make-view-parameters copy-view-parameters
	  	view-parameters-center
	  	view-parameters-station
	  	view-parameters-normal
	  	view-parameters-up
	  	view-parameters-reference
	  	view-parameters-distance
	  	view-parameters-near-plane
	  	view-parameters-far-plane
	  	view-parameters-drawable-center
	  	view-parameters-drawable-halfsize
	  	view-parameters-drawable-resolution
	  	view-parameters-type

                font-info

                light light-loc light-color
                make-light copy-light light-p
                
                light-parameters light-parameters-p make-light-parameters
                light-parameters-lights
                light-parameters-ambience

                material-properties material-properties-p make-material-properties
                material-properties-type
                material-properties-kDiff
                material-properties-kSpec
                material-properties-kTrans
                material-properties-kPhong
                material-properties-kRefr
                material-properties-red
                material-properties-green
                material-properties-blue
                material-properties-alpha

	  graphic-view graphic-window
	  ))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
:page

#| the root of graphic elements is the structure class ELEMENT
   it provides the minimal slots for location,  end, and properties
   when structures are not used, several auxiliary functions must also
   be explicitly defined.|#
   
#+:og-structures 
(defStruct element 
  (location (make-coordinate-object))
  (end (make-coordinate-object))
  (properties nil))
#-:og-structures
(progn
  (defClass element nil
    ((location :initarg :location :accessor element-location
	       :initform (make-coordinate-object))
     (end :initarg :end :accessor element-end
	  :initform (make-coordinate-object))
     (properties :initarg :properties :accessor element-properties :initform nil)))
  (defun element-p (x)
    (typep x 'element)))

;(defParameter element (make-instance 'element))

(defMETHOD make-instance
           ((x element) &rest initargs)
  (apply #'make-instance (type-of x) initargs))
(defMETHOD initialize-instance
           ((self element) &rest initargs)
  (declare (ignore initargs))
  ;; base function for all elements
  (call-next-method)
  self)

(defun element-list-p (el)
  ;; determines if all members of a list are elements. the null list qualifies.
  (and (listp el)
       (dolist (e el t) (if (not (element-p e)) (return nil)))))

(defMethod element-attributes
    ((self element))
  (getf (slot-value self 'properties) :attributes))
(defMethod (setf element-attribuites)
    (new-attributes (self element))
  (setf (getf (slot-value self 'properties) :attributes) new-attributes))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
:page

"# a specialized view serves as the context to display graphic elements.
   it incorporates slots to cache selected elements, displayed elements,
   and display transforms."

(defStruct font-info font face mode size)


#| view structures encapsulate all viewing parameters|#

(defStruct view-parameters
  (center (make-coordinate-world))    ; location to look-at
  (station (make-coordinate-world
            :x 0 :y 0 :z 50))         ; and look from in world coordinates
  (normal (coordinate-normalize
           (make-coordinate-world
            :x 0 :y 0 :z 50)))        ; a vector from center to station
  (up (make-coordinate-world
       :x 0 :y 1 :z 0))               ; a vector pointing up
  (reference (make-coordinate-world)) ; a reference point on projection plane ?
  (distance (make-coordinate-world
             :x 0 :y 0 :z 50))        ; from center 
  (angle 0.0)
  (near-plane 0.01)                   ; distance to near clip plane
  (far-plane 100)                     ; to far plane
  drawable-center                     ; (Cu, Cv)
  drawable-halfsize                   ; window u,v halfsizes
  drawable-resolution
  type
  aspect-mode
  minimum
  maximum)

#| special color structures are not necessary in 2.0|#
#-:ccl
(defStruct Color
  (red 0.0 :type short-float)
  (green 0.0 :type short-float)
  (blue 0.0 :type short-float)
  (alpha 0.0 :type short-float))

(defStruct Light
  (loc (make-coordinate-3))
  (color (make-color  (* 0.5 32768) (* 0.5 32768) (* 0.8 32768))))

(defStruct light-parameters
  (lights (make-array 0 :adjustable t :fill-pointer t))
  (ambience (make-color  (coerce-to-saturation 0.5)
                         (coerce-to-saturation 0.5)
                         (coerce-to-saturation 0.5))
            :type color))

(defSTRUCT energy-properties
  (red 0.0 :type short-float)
  (green 0.0 :type short-float)
  (blue 0.0 :type short-float)
  (alpha 0.0 :type short-float))

(defSTRUCT reflective-energy-properties
  (kDiff 0.0 :type short-float)		; diffuse coefficient
  (kSpec 0.0 :type short-float)		; specular
  (kPhong 5000.0 :type short-float)	; phong reflection coefficient
  )

(defSTRUCT refractive-energy-properties
  (kDiff 0.0 :type short-float)		; diffuse coefficient
  (kTrans 0.0 :type short-float)	; transmission
  (kRefr 0.0 :type short-float) 	; refraction)
  )
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
:page
#|read functions:
  these dispatch on structure type to the respective objects' method.
  the print function is defined separately for each structure.|#

(defMethod make-element-instance
   ((self symbol) definition)
  (make-instance 'element :location (first definition)
                 :end (second definition)
                 :properties (third definition)))

(set-dispatch-macro-character #\# #\g 'graphic-reader)

(defun graphic-reader (stream subchar dummy
                       &aux type definition)
  (declare (ignore subchar dummy))
  (setq definition (read stream t nil t))
  (if *read-suppress* (return-from graphic-reader nil))
  (assert (and (consp definition) (symbolp (first definition)))
	  (definition)
	  "Syntax error in element definition [~s].")
  (setq type (pop definition))
  (if (subtypep type 'element)
    (make-element-instance type definition)
    (progn (warn "Not a graphic element definition [~s ~{~s~^ ~}]."
                 type definition)
	   (values))))


(defClass message-window (#+:ccl listener)
  ((binding :initarg :binding))
  (:default-initargs :window-show nil))

(defMethod window-close :around
           ((self message-window))
  (if (window-shown-p self)
    (window-hide self)
    (call-next-method)))
(defParameter *message-window* nil)

;;;; --------------------------------------------------------------------------
;;;; parameters
;; the unit rectangle serves as the default frame for pictures
;; it is 255x255 since that is 8 bits.

(defPARAMETER *unit-rectangle*
  (make-record :rect :top 0 :left 0 :bottom 255 :right 255))

(defPARAMETER *click-spacing* 3)
(defPARAMETER *click-delay* 10)
(defPARAMETER *click-angle-delta* .2)

;;;; --------------------------------------------------------------------------
:eof

