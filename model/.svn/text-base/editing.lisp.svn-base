;;; -*- Mode: LISP; Syntax: Common-lisp; Package: de.setf.object-graphics.implementation; Base: 10; Lowercase: Yes -*-

#|
<DOCUMENTATION>
 <title>editing model constituents</title>
 <DESCRIPTION>
  definition for the polyline model class
  </DESCRIPTION>
 <CHRONOLOGY>
  <DELTA DATE='19880616' AUTHOR='jaa@dtmg' />
  <DELTA DATE='19891108' AUTHOR='jaa@dtmg' >ported to clx/pcl</DELTA>
  <DELTA DATE='20030901' AUTHOR='james.anderson@setf.de' >scrne graph model</DELTA>
  </CHRONOLOGY>
 </DOCUMENTATION>
|#



(in-package :de.setf.object-graphics.implementation)

(defMethod edit-self ((instance line) drawable &key where (mode :position)
                      &aux new-line)
  (with-slots (location end) instance
    (indicate self drawable)
    (setq new-line (make-line
		    :location (location-transform drawable location)
		    :end (location-transform drawable end)))
    (setq new-line
          (case mode
            (:location (drag-line drawable new-line :location where))
            (:content (edit-line drawable new-line :location where))
            (t (warn "unknown editing option ~a." mode))))
    (when (line-p new-line)
      (setf (line-location new-line)
	    (location-inverse-transform drawable (line-location new-line))
	    (line-end new-line)
	    (location-inverse-transform drawable (line-end new-line)))
      (invalidate drawable new-line))
    new-line))


(defObFun (edit-self polygon) :after
    (&key where drawable (context drawable) (mode :location)
     &aux new-polygon)
  (declare (object-variable location end))
  (if (and (null drawable) (null (setq drawable context)))
    (error "drawable must be specified."))
  (draw-region drawable self)
  (setq new-polygon
	(make-polygon :location (location-transform context location)
			 :points (mapcar #'(lambda (p) (location-transform context p))
					 points)))
  (setq new-polygon
        (case mode
          (:location (drag-polygon drawable new-polygon :location where))
          (:content (edit-polygon drawable new-polygon :location where))
          (t (warn "unknown editing option ~a." mode))))
  (when (polygon-p new-polygon)
    (setf (polygon-points new-polygon)
	  (mapcar #'(lambda (p) (location-inverse-transform context p))
		  (polygon-points new-polygon))
          (polygon-location new-polygon)
          (first (polygon-points new-polygon)))
    (draw-self new-polygon drawable)
    new-polygon))
:eof
