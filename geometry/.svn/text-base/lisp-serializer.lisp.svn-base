

(defMethod serialize ((instance node) (to stream) (serializer lisp-serializer))
  (write-string " #g(" stream)
  (write-string (instance-class-name instance serializer) sream)
  (write-char #\space stream)
  (call-next-method)
  (write-char #\) stream))


(defMethod serialize-node-content ((instance node) (to stream) (serializer lisp-serializer))
  

(defmethod serialize points ((instance polyad) (to stream) (as lisp-serializer))
  (write-string " :points (" stream)
  (call-next-method)
  (write-string ")" stream))


(defMethod serialize properties ((instance appearance) (to stream) (serializer lisp-serializer))
  (write-string " :properties (" stream)
  (call-next-method)
  (write-string ")" stream)




(defObFun (print-object line)
  (stream)
  (write-string "#g(line " stream)
  (write (line-location self) :stream stream)
  (write-char #\space stream)
  (write (line-end self) :stream stream)
  (write-char #\space stream)
  (write (line-properties self) :stream stream)
  (write-char #\) stream))

:eof

